using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Net;

namespace GetTempMailORG
{
    public class TempMailAdvanced : IDisposable
    {
        public string? _baseUrl = "https://web2.temp-mail.org";
        private readonly HttpClient httpClient;
        private readonly CookieContainer cookieContainer;
        private bool disposed = false;

        public TempMailAdvanced()
        {
            cookieContainer = new CookieContainer();
            
            var handler = new HttpClientHandler()
            {
                CookieContainer = cookieContainer,
                UseCookies = true,
                UseDefaultCredentials = false
            };

            httpClient = new HttpClient(handler);
            
            // Headers như Postman
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Add("User-Agent", "PostmanRuntime/7.32.3");
            httpClient.DefaultRequestHeaders.Add("Accept", "*/*");
            httpClient.DefaultRequestHeaders.Add("Accept-Encoding", "gzip, deflate, br");
            httpClient.DefaultRequestHeaders.Add("Connection", "keep-alive");

            httpClient.Timeout = TimeSpan.FromSeconds(30);
        }

        public async Task<TempMail.Mail?> GetMailAsync()
        {
            try
            {
                Console.WriteLine("Using Postman-like approach...");
                
                // Gửi POST request giống như Postman
                var content = new StringContent("", Encoding.UTF8, "application/x-www-form-urlencoded");
                HttpResponseMessage response = await httpClient.PostAsync($"{_baseUrl}/mailbox", content);
                
                Console.WriteLine($"Status Code: {response.StatusCode}");
                Console.WriteLine($"Response Headers: {string.Join(", ", response.Headers.Select(h => $"{h.Key}: {string.Join(", ", h.Value)}"))}");
                
                if (response.IsSuccessStatusCode)
                {
                    string html = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Response Length: {html.Length}");
                    Console.WriteLine($"First 500 chars: {html.Substring(0, Math.Min(500, html.Length))}");
                    
                    string token = Regex.Match(html, "\"token\":\"(.*?)\"").Groups[1].Value;
                    string email = Regex.Match(html, "\"mailbox\":\"(.*?)\"").Groups[1].Value;
                    
                    Console.WriteLine($"Token: {token}");
                    Console.WriteLine($"Email: {email}");
                    
                    if (!string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(email))
                    {
                        return new TempMail.Mail { Token = token, Email = email };
                    }
                }
                else
                {
                    string errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error response: {errorContent}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex.Message}");
                throw;
            }
            return null;
        }

        public async Task<string?> GetOTPAsync(string token)
        {
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            for (int i = 0; i < 10; i++)
            {
                try
                {
                    Console.WriteLine($"Checking for OTP, attempt {i + 1}...");
                    
                    HttpResponseMessage response = await httpClient.GetAsync($"{_baseUrl}/messages");
                    if (response.IsSuccessStatusCode)
                    {
                        string html = await response.Content.ReadAsStringAsync();
                        string otp = Regex.Match(html, "Your OTP is: (.*?)</p>").Groups[1].Value;
                        if (!string.IsNullOrEmpty(otp))
                        {
                            return otp;
                        }
                    }
                    
                    await Task.Delay(5000);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception in GetOTP: {ex.Message}");
                }
            }
            return null;
        }

        public void Dispose()
        {
            if (!disposed)
            {
                httpClient?.Dispose();
                disposed = true;
            }
        }
    }
}