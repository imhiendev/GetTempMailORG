using System;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Net;
using System.IO;

namespace GetTempMailORG
{
    public class TempMailRaw : IDisposable
    {
        private readonly string _baseUrl = "https://web2.temp-mail.org";
        private readonly HttpClient httpClient;
        private bool disposed = false;

        public TempMailRaw()
        {
            var handler = new HttpClientHandler()
            {
                UseProxy = false, // Disable proxy
                UseCookies = true,
                AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate
            };

            httpClient = new HttpClient(handler);
            httpClient.Timeout = TimeSpan.FromSeconds(30);
            
            // Minimal headers
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Add("User-Agent", "Python/3.9 requests/2.28.1");
            httpClient.DefaultRequestHeaders.Add("Accept", "*/*");
        }

        public async Task<TempMail.Mail?> GetMailAsync()
        {
            try
            {
                Console.WriteLine("Using raw HTTP approach...");

                // Tạo request message thủ công
                var request = new HttpRequestMessage(HttpMethod.Post, $"{_baseUrl}/mailbox");
                request.Headers.Add("User-Agent", "Python/3.9 requests/2.28.1");
                request.Headers.Add("Accept", "*/*");
                request.Headers.Add("Accept-Encoding", "gzip, deflate");
                request.Headers.Add("Connection", "keep-alive");
                
                // Empty content
                request.Content = new ByteArrayContent(new byte[0]);
                request.Content.Headers.Clear();
                request.Content.Headers.Add("Content-Type", "application/x-www-form-urlencoded");
                request.Content.Headers.Add("Content-Length", "0");

                var response = await httpClient.SendAsync(request);
                Console.WriteLine($"Raw approach status: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    string html = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Raw response length: {html.Length}");
                    
                    // Extract data
                    string token = Regex.Match(html, "\"token\":\"(.*?)\"").Groups[1].Value;
                    string email = Regex.Match(html, "\"mailbox\":\"(.*?)\"").Groups[1].Value;
                    
                    if (!string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(email))
                    {
                        return new TempMail.Mail { Token = token, Email = email };
                    }
                }
                else
                {
                    string errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Raw approach error: {errorContent}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Raw approach exception: {ex.Message}");
            }
            return null;
        }

        public async Task<string?> GetOTPAsync(string token)
        {
            if (string.IsNullOrEmpty(token))
                return null;

            var request = new HttpRequestMessage(HttpMethod.Get, $"{_baseUrl}/messages");
            request.Headers.Add("Authorization", $"Bearer {token}");
            request.Headers.Add("User-Agent", "Python/3.9 requests/2.28.1");
            request.Headers.Add("Accept", "*/*");

            for (int i = 0; i < 10; i++)
            {
                try
                {
                    Console.WriteLine($"Raw OTP attempt {i + 1}...");
                    await Task.Delay(5000);

                    var response = await httpClient.SendAsync(request);
                    if (response.IsSuccessStatusCode)
                    {
                        string html = await response.Content.ReadAsStringAsync();
                        string otp = Regex.Match(html, @"Your OTP is: (.*?)</p>").Groups[1].Value;
                        if (!string.IsNullOrEmpty(otp))
                        {
                            return otp;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Raw OTP exception: {ex.Message}");
                }
            }
            return null;
        }

        public void Dispose()
        {
            if (!disposed)
            {
                httpClient?.Dispose();
                disposed = true;
            }
        }
    }
}