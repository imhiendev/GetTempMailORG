# TempMail with JA3 Fingerprinting / Email Tạm Thời với JA3 Fingerprinting

[English](#english) | [Tiếng Việt](#tiếng-việt)

---

# English

A powerful C# library for creating temporary email addresses using advanced JA3 fingerprinting to bypass Cloudflare protection and other anti-bot measures.

## 🚀 Features

- **JA3 Fingerprinting**: Advanced TLS fingerprinting to mimic real browsers
- **Multiple JA3 Profiles**: Custom Chrome and Default fingerprints for maximum compatibility
- **Cloudflare Bypass**: Successfully bypasses Cloudflare protection
- **HTTP/1.1 Enforcement**: Prevents HTTP/2 binary response issues
- **Chunked Encoding Support**: Handles HTTP chunked transfer encoding
- **Compression Support**: Automatic Gzip/Deflate decompression
- **OTP Monitoring**: Real-time monitoring for incoming emails and OTPs
- **Error Resilience**: Multiple fallback mechanisms for maximum reliability

## 📋 Requirements

- .NET 8.0 or higher
- Internet connection
- Windows/Linux/macOS compatible

## 🛠️ Installation

1. Clone the repository:
```bash
git clone <repository-url>
cd GetTempMailORG
```

2. Build the project:
```bash
dotnet build
```

3. Run the application:
```bash
dotnet run
```

## 💻 Usage

### Basic Usage

```csharp
using GetTempMailORG;

// Create TempMail instance
using var tempMail = new TempMail();

// Get temporary email
var mail = await tempMail.GetMailAsync();
if (mail != null)
{
    Console.WriteLine($"Email: {mail.Email}");
    Console.WriteLine($"Token: {mail.Token}");
    
    // Monitor for OTP
    var otp = await tempMail.GetOTPAsync(mail.Token);
    if (!string.IsNullOrEmpty(otp))
    {
        Console.WriteLine($"OTP: {otp}");
    }
}
```

### Synchronous Usage

```csharp
using var tempMail = new TempMail();

var mail = tempMail.GetMail();
if (mail != null)
{
    var otp = tempMail.GetOTP(mail.Token);
}
```

## 🏗️ Architecture

### Core Components

1. **TempMail**: Main class for email operations
2. **CustomHttpClient**: HTTP client with JA3 fingerprinting
3. **TlsClient**: Low-level TLS client with custom fingerprinting
4. **JA3Fingerprint**: JA3 fingerprint definitions and utilities

### JA3 Fingerprinting

The library uses two main JA3 fingerprints:

- **CustomChrome**: Advanced Chrome fingerprint with specific cipher suites
- **Default**: Standard Chrome fingerprint for fallback

### Request Flow

```
TempMail → CustomHttpClient → TlsClient → Target Server
    ↑            ↑               ↑
JA3 Config   HTTP/1.1      TLS Handshake
             Headers       with JA3
```

## 🔧 Technical Details

### JA3 Fingerprinting

JA3 is a method for creating SSL/TLS client fingerprints. The library implements:

- Custom TLS handshake with specific cipher suites
- Controlled extension ordering
- Application protocol negotiation (HTTP/1.1 only)
- Certificate validation bypass

### Anti-Detection Features

- **Browser Headers**: Realistic Chrome headers
- **HTTP/1.1 Enforcement**: Prevents HTTP/2 detection
- **Connection Management**: Proper connection handling
- **Error Simulation**: Human-like error patterns

### Response Handling

- **Chunked Encoding**: Automatic chunk processing
- **Compression**: Gzip/Deflate decompression
- **Encoding Detection**: Multiple character encoding support
- **Error Recovery**: Graceful fallback mechanisms

## 🎯 Use Cases

- **Testing**: Email verification testing
- **Development**: Temporary email for development
- **Privacy**: Anonymous email communication
- **Automation**: Automated email handling in applications

## 🔒 Security & Legal

### Ethical Usage

This tool is designed for:
- ✅ Testing your own applications
- ✅ Development and debugging
- ✅ Educational purposes
- ✅ Legitimate temporary email needs

### Not Intended For

- ❌ Bypassing legitimate security measures
- ❌ Spamming or abuse
- ❌ Illegal activities
- ❌ Violating terms of service

### Disclaimer

Users are responsible for complying with applicable laws and terms of service.

## 🔄 API Reference

### TempMail Class

#### Methods

- `GetMailAsync()`: Asynchronously get temporary email
- `GetMail()`: Synchronously get temporary email
- `GetOTPAsync(string token)`: Asynchronously monitor for OTP
- `GetOTP(string token)`: Synchronously get OTP
- `Dispose()`: Clean up resources

#### Properties

- `Mail.Email`: The temporary email address
- `Mail.Token`: Authentication token for the email

### JA3Fingerprint Class

#### Static Properties

- `Default`: Standard Chrome fingerprint
- `CustomChrome`: Advanced Chrome fingerprint

#### Methods

- `ParseFromString(string ja3)`: Parse JA3 from string
- `GenerateJA3String()`: Generate JA3 string
- `GetDisplayInfo()`: Get fingerprint information

## 📝 License

This project is provided for educational and legitimate testing purposes. Users are responsible for ensuring compliance with applicable laws and terms of service.

---

# Tiếng Việt

Thư viện C# mạnh mẽ để tạo địa chỉ email tạm thời sử dụng công nghệ JA3 fingerprinting tiên tiến để vượt qua bảo vệ Cloudflare và các biện pháp chống bot khác.

## 🚀 Tính Năng

- **JA3 Fingerprinting**: Công nghệ TLS fingerprinting tiên tiến để mô phỏng trình duyệt thật
- **Nhiều JA3 Profile**: Fingerprint Chrome tùy chỉnh và mặc định để tương thích tối đa
- **Vượt Qua Cloudflare**: Thành công trong việc vượt qua bảo vệ Cloudflare
- **Ép Buộc HTTP/1.1**: Ngăn chặn vấn đề phản hồi binary HTTP/2
- **Hỗ Trợ Chunked Encoding**: Xử lý HTTP chunked transfer encoding
- **Hỗ Trợ Nén**: Tự động giải nén Gzip/Deflate
- **Theo Dõi OTP**: Theo dõi thời gian thực email và OTP đến
- **Khả Năng Chịu Lỗi**: Nhiều cơ chế dự phòng để đảm bảo độ tin cậy tối đa

## 📋 Yêu Cầu

- .NET 8.0 trở lên
- Kết nối Internet
- Tương thích Windows/Linux/macOS

## 🛠️ Cài Đặt

1. Clone repository:
```bash
git clone <repository-url>
cd GetTempMailORG
```

2. Build dự án:
```bash
dotnet build
```

3. Chạy ứng dụng:
```bash
dotnet run
```

## 💻 Cách Sử Dụng

### Sử Dụng Cơ Bản

```csharp
using GetTempMailORG;

// Tạo instance TempMail
using var tempMail = new TempMail();

// Lấy email tạm thời
var mail = await tempMail.GetMailAsync();
if (mail != null)
{
    Console.WriteLine($"Email: {mail.Email}");
    Console.WriteLine($"Token: {mail.Token}");
    
    // Theo dõi OTP
    var otp = await tempMail.GetOTPAsync(mail.Token);
    if (!string.IsNullOrEmpty(otp))
    {
        Console.WriteLine($"OTP: {otp}");
    }
}
```

### Sử Dụng Đồng Bộ

```csharp
using var tempMail = new TempMail();

var mail = tempMail.GetMail();
if (mail != null)
{
    var otp = tempMail.GetOTP(mail.Token);
}
```

## 🏗️ Kiến Trúc

### Các Thành Phần Chính

1. **TempMail**: Class chính cho các thao tác email
2. **CustomHttpClient**: HTTP client với JA3 fingerprinting
3. **TlsClient**: TLS client mức thấp với fingerprinting tùy chỉnh
4. **JA3Fingerprint**: Định nghĩa và tiện ích JA3 fingerprint

### JA3 Fingerprinting

Thư viện sử dụng hai JA3 fingerprint chính:

- **CustomChrome**: Fingerprint Chrome nâng cao với cipher suite cụ thể
- **Default**: Fingerprint Chrome tiêu chuẩn để dự phòng

### Luồng Request

```
TempMail → CustomHttpClient → TlsClient → Target Server
    ↑            ↑               ↑
JA3 Config   HTTP/1.1      TLS Handshake
             Headers       với JA3
```

## 🔧 Chi Tiết Kỹ Thuật

### JA3 Fingerprinting

JA3 là phương pháp tạo fingerprint cho SSL/TLS client. Thư viện triển khai:

- TLS handshake tùy chỉnh với cipher suite cụ thể
- Thứ tự extension được kiểm soát
- Thương lượng application protocol (chỉ HTTP/1.1)
- Bỏ qua xác thực certificate

### Tính Năng Chống Phát Hiện

- **Browser Headers**: Header Chrome thực tế
- **Ép Buộc HTTP/1.1**: Ngăn phát hiện HTTP/2
- **Quản Lý Kết Nối**: Xử lý kết nối đúng cách
- **Mô Phỏng Lỗi**: Mẫu lỗi giống con người

### Xử Lý Response

- **Chunked Encoding**: Xử lý chunk tự động
- **Compression**: Giải nén Gzip/Deflate
- **Phát Hiện Encoding**: Hỗ trợ nhiều character encoding
- **Khôi Phục Lỗi**: Cơ chế fallback mềm mại

## 🎯 Trường Hợp Sử Dụng

- **Testing**: Kiểm thử xác minh email
- **Development**: Email tạm thời cho phát triển
- **Privacy**: Giao tiếp email ẩn danh
- **Automation**: Xử lý email tự động trong ứng dụng

## 🔒 Bảo Mật & Pháp Lý

### Sử Dụng Đạo Đức

Công cụ này được thiết kế cho:
- ✅ Kiểm thử ứng dụng của bạn
- ✅ Phát triển và debug
- ✅ Mục đích giáo dục
- ✅ Nhu cầu email tạm thời hợp pháp

### Không Dành Cho

- ❌ Vượt qua biện pháp bảo mật hợp pháp
- ❌ Spam hoặc lạm dụng
- ❌ Hoạt động bất hợp pháp
- ❌ Vi phạm điều khoản dịch vụ

### Tuyên Bố Miễn Trừ

Người dùng có trách nhiệm tuân thủ luật pháp hiện hành và điều khoản dịch vụ.

## 🔄 Tài Liệu API

### Class TempMail

#### Methods

- `GetMailAsync()`: Lấy email tạm thời bất đồng bộ
- `GetMail()`: Lấy email tạm thời đồng bộ
- `GetOTPAsync(string token)`: Theo dõi OTP bất đồng bộ
- `GetOTP(string token)`: Lấy OTP đồng bộ
- `Dispose()`: Dọn dẹp tài nguyên

#### Properties

- `Mail.Email`: Địa chỉ email tạm thời
- `Mail.Token`: Token xác thực cho email

### Class JA3Fingerprint

#### Static Properties

- `Default`: Fingerprint Chrome tiêu chuẩn
- `CustomChrome`: Fingerprint Chrome nâng cao

#### Methods

- `ParseFromString(string ja3)`: Parse JA3 từ string
- `GenerateJA3String()`: Tạo JA3 string
- `GetDisplayInfo()`: Lấy thông tin fingerprint

## 🐛 Khắc Phục Sự Cố

### Các Vấn Đề Thường Gặp

1. **Connection Timeout**
   - Kiểm tra kết nối internet
   - Tăng giá trị timeout
   - Thử JA3 profile khác

2. **Invalid Response**
   - Server có thể đã cập nhật bảo vệ
   - Thử chạy lại sau một khoảng thời gian
   - Kiểm tra xem dịch vụ có khả dụng không

3. **Không Nhận Được OTP**
   - Email có thể mất thời gian để đến
   - Kiểm tra thư mục spam tương ứng
   - Xác minh địa chỉ email đúng

## 📊 Hiệu Suất

### Benchmark

- **Tạo Email**: ~2-5 giây
- **Nhận OTP**: ~1-2 phút (tùy thuộc vào email đến)
- **Sử Dụng Memory**: ~10-20 MB
- **Tỷ Lệ Thành Công**: ~95% (tùy theo bảo vệ target)

### Mẹo Tối Ưu

1. Tái sử dụng TempMail instance khi có thể
2. Triển khai connection pooling cho nhiều request
3. Sử dụng async methods để hiệu suất tốt hơn
4. Cache các fingerprint thành công

## 🤝 Đóng Góp

1. Fork repository
2. Tạo feature branch
3. Thực hiện thay đổi
4. Thêm test nếu có thể
5. Submit pull request

### Thiết Lập Development

```bash
git clone <repository-url>
cd GetTempMailORG
dotnet restore
dotnet build
```

### Testing

```bash
dotnet test
```

## 📝 Giấy Phép

Dự án này được cung cấp cho mục đích giáo dục và kiểm thử hợp pháp. Người dùng có trách nhiệm đảm bảo tuân thủ luật pháp hiện hành và điều khoản dịch vụ.

## 🙏 Ghi Nhận

- Phương pháp JA3 fingerprinting bởi Salesforce
- Hướng dẫn triển khai TLS từ tài liệu .NET
- Đặc tả giao thức HTTP từ tài liệu RFC

## 📞 Hỗ Trợ

Đối với các vấn đề và câu hỏi:
1. Kiểm tra phần khắc phục sự cố
2. Xem lại các vấn đề thường gặp
3. Tạo issue với thông tin chi tiết

---

**⚠️ Quan Trọng**: Công cụ này nên được sử dụng có trách nhiệm và tuân thủ luật pháp hiện hành cũng như điều khoản dịch vụ. Các nhà phát triển không chịu trách nhiệm cho việc sử dụng sai mục đích phần mềm này.