using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace GetTempMailORG
{
    public class TempMail : IDisposable
    {
        public string? _baseUrl = "https://web2.temp-mail.org";
        private readonly HttpClient httpClient;
        private bool disposed = false;

        public TempMail()
        {
            httpClient = new HttpClient();
            httpClient.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36");
            httpClient.DefaultRequestHeaders.Add("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
            httpClient.DefaultRequestHeaders.Add("Accept-Language", "en-US,en;q=0.9");
            httpClient.DefaultRequestHeaders.Add("Accept-Encoding", "gzip, deflate, br");
            httpClient.DefaultRequestHeaders.Add("Cache-Control", "no-cache");
            httpClient.DefaultRequestHeaders.Add("Pragma", "no-cache");
        }

        public async Task<Mail?> GetMailAsync()
        {
            try
            {
                // Thử gửi POST request mà không có content trước
                HttpResponseMessage response = await httpClient.PostAsync($"{_baseUrl}/mailbox", null);
                
                Console.WriteLine($"Status Code: {response.StatusCode}");
                Console.WriteLine($"Response Headers: {response.Headers}");
                
                if (response.IsSuccessStatusCode)
                {
                    string html = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Response Length: {html.Length}");
                    Console.WriteLine($"First 500 chars: {html.Substring(0, Math.Min(500, html.Length))}");
                    
                    string token = Regex.Match(html, "\"token\":\"(.*?)\"").Groups[1].Value;
                    string email = Regex.Match(html, "\"mailbox\":\"(.*?)\"").Groups[1].Value;
                    
                    Console.WriteLine($"Token found: {!string.IsNullOrEmpty(token)}");
                    Console.WriteLine($"Email found: {!string.IsNullOrEmpty(email)}");
                    
                    if (!string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(email))
                    {
                        return new Mail { Token = token, Email = email };
                    }
                    
                    // Nếu không tìm thấy token/email, thử với pattern khác
                    token = Regex.Match(html, @"token['"":]\s*['""]([^'""]+)['""]").Groups[1].Value;
                    email = Regex.Match(html, @"mailbox['"":]\s*['""]([^'""]+)['""]").Groups[1].Value;
                    
                    Console.WriteLine($"Alternative token found: {!string.IsNullOrEmpty(token)}");
                    Console.WriteLine($"Alternative email found: {!string.IsNullOrEmpty(email)}");
                    
                    if (!string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(email))
                    {
                        return new Mail { Token = token, Email = email };
                    }
                }
                else
                {
                    string errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error response: {errorContent}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception in GetMailAsync: {ex.Message}");
                Console.WriteLine($"Exception stack trace: {ex.StackTrace}");
                throw new Exception(ex.Message);
            }
            return null;
        }

        public async Task<string?> GetOTPAsync(string _token)
        {
            string? code = "";
            
            // Clear existing authorization header
            httpClient.DefaultRequestHeaders.Authorization = null;
            
            // Set authorization header with the token
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _token ?? "");
            
            for (int i = 0; i < 10; i++)
            {
                try
                {
                    HttpResponseMessage response = await httpClient.GetAsync($"{_baseUrl}/messages");
                    Console.WriteLine($"GetOTP attempt {i + 1}, Status: {response.StatusCode}");
                    
                    if (response.IsSuccessStatusCode)
                    {
                        string html = await response.Content.ReadAsStringAsync();
                        Console.WriteLine($"Messages response length: {html.Length}");
                        
                        string otp = Regex.Match(html, "Your OTP is: (.*?)</p>").Groups[1].Value;
                        if (!string.IsNullOrEmpty(otp))
                        {
                            Console.WriteLine($"OTP found: {otp}");
                            return otp;
                        }
                        
                        // Try alternative OTP patterns
                        otp = Regex.Match(html, @"OTP[:\s]*(\d+)").Groups[1].Value;
                        if (!string.IsNullOrEmpty(otp))
                        {
                            Console.WriteLine($"Alternative OTP found: {otp}");
                            return otp;
                        }
                    }
                    else
                    {
                        string errorContent = await response.Content.ReadAsStringAsync();
                        Console.WriteLine($"GetOTP error response: {errorContent}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception in GetOTPAsync: {ex.Message}");
                    throw new Exception(ex.Message);
                }
                await Task.Delay(5000);
            }
            return code;
        }

        // Synchronous wrapper methods for backward compatibility
        public Mail? GetMail()
        {
            return GetMailAsync().GetAwaiter().GetResult();
        }

        public string? GetOTP(string _token)
        {
            return GetOTPAsync(_token).GetAwaiter().GetResult();
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!disposed)
            {
                if (disposing)
                {
                    httpClient?.Dispose();
                }
                disposed = true;
            }
        }

        public class Mail
        {
            public string? Token { get; set; }
            public string? Email { get; set; }
        }
    }
}